#!/usr/bin/env python

import sys
import os
import re
import imp
import glob
import time
import subprocess


def global_init():

    global ROOT
    try:
        ROOT
        return
    except NameError:
        pass
    import ROOT
    
    noolp = False

    if noolp:
        ROOT.gSystem.AddIncludePath("-DDISABLE_OLP")

    else:
        ROOT.gSystem.Load("libgolem_olp_heft.so")
        ROOT.gSystem.Load("libgolem_olp_full.so")

    ROOT.gSystem.Load("libRIO.so")
    ROOT.gSystem.Load("libTreePlayer.so")
    ROOT.gPluginMgr.AddHandler("TVirtualStreamerInfo", "*", "TStreamerInfo", "RIO", "TStreamerInfo()")
    ROOT.gPluginMgr.AddHandler("TVirtualTreePlayer", "*", "TTreePlayer", "TreePlayer", "TTreePlayer()");

    ROOT.gSystem.Load("libfastjet.so")
    # ROOT.gSystem.Load("libLHAPDF.so")
    # ROOT.gROOT.LoadMacro("LHAGlue.h+")
    ROOT.gROOT.LoadMacro("TSelectorMain.C+")
    ROOT.gROOT.LoadMacro("TSelectorAnalyzer.C+")
    ROOT.gROOT.LoadMacro("TSelectorWrite.C+")
    ROOT.gROOT.LoadMacro("TSelectorReader.C+")





def main(filenames):

    # Store starting time:
    start_time = time.time()

    # Initialize can compile in ROOT:
    global_init()

    # We want to handle Ctrl+C
    sh = ROOT.TSignalHandler(ROOT.kSigInterrupt, False)
    sh.Add()
    sh.Connect("Notified()", "TROOT", ROOT.gROOT, "SetInterrupt()")


    # #// Define reader selector:
    # an_reader = ROOT.TSelectorReader()

    # #// Analysis Selectors:
    # AnalyzerSelector = ROOT.TSelectorAnalyzer()
    # an_reader.addSelector(AnalyzerSelector)

    # #// Define chain and add file list:
    # chain = ROOT.TChain("t3")
    # for name in filenames:
    #     chain.Add(name)

    # #// Start processing the chain:
    # chain.GetFile()  # force opening of the first file
    # chain.SetMaxEntryLoop(2**60)
    # chain.Process(an_reader, "", chain.GetMaxEntryLoop(), 0)


    # *****************************************************
    #// If need to reweight we need a chain for every file:
    # *****************************************************

    for name in filenames:

        #// Define reader selector:
        rw_reader = ROOT.TSelectorReader()

        #// -- Reweight Selectors:
        ReweightSelector = ROOT.TSelectorWrite()
        ReweightSelector.debug=False
        ReweightSelector.SetFileName(name,"_mt172_mb0.0")
        ReweightSelector.SetParameters(172.3,0.0,0.0)
        rw_reader.addSelector(ReweightSelector)

        rw_chain = ROOT.TChain("t3")
        rw_chain.Add(name)

        #// Start processing the chain:
        rw_chain.GetFile()  # force opening of the first file
        rw_chain.SetMaxEntryLoop(2**60)
        rw_chain.Process(rw_reader, "", rw_chain.GetMaxEntryLoop(), 0)
        #rw_chain.Process(rw_reader, "", 10, 0)



    print "Run time: %d seconds" % (time.time() - start_time)

    sys.exit()


if __name__ == '__main__':

  ## Argument parser
  from argparse import ArgumentParser

  parser = ArgumentParser(description='NLO NTuples analysis tool.')
  parser.add_argument('INPUTFILES', nargs='+', metavar='Ntuple.root', help='One or more Root NTuple input files. When more than one input file is given, the files are processed one after the other.')
  parser.add_argument("-o", "--output", dest="OUTPUT", default="plots.root", help="name of  [plots]")
  #parser.add_argument("-f", "--format", dest="FORMAT", default="genplots", help="output format for plots [genplots]")
  #parser.add_argument("-s","--show", action='store_true', dest="SHOW", default=False, help="show results in default web browser [NO]")
  #parser.add_argument("-w","--overwrite", action='store_true', dest="OVERWRITE", default=False, help="overwrite existing plots [NO]")
  #parser.add_argument("-n", "-j", "--num-threads",action="store", dest='NUM_THREADS', type=int, default=numcores, help="max number of threads to be used [%s]" % numcores)
  #parser.add_argument("-a", "--alpha", action="store", dest='ALPHA_BAND', type=float, default=0.2, help="transparency of error bands [0.2]")
  #parser.add_argument("-v", "--verbose", action="store_const", const=logging.DEBUG, dest="LOGLEVEL", default=logging.INFO, help="print debug (very verbose) messages [NO]")
  #parser.add_argument("-q", "--quiet", action="store_const", const=logging.WARNING, dest="LOGLEVEL", default=logging.INFO, help="be very quiet [NO]")
  #parser.add_argument("-p", "--prefix", dest="PREFIX", default="xxx", help="prefix to histogram file names")

  args      = parser.parse_args()
  filenames = args.INPUTFILES
  output    = args.OUTPUT

  # Output format:
  # default: genplots style
  #outform = args.FORMAT
  #prefix  = args.PREFIX

  filenames.sort()

  main(filenames)
